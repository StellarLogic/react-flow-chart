{"version":3,"sources":["Bqflow/state/constants.js","Bqflow/Palette.js","Bqflow/state/state.js","Bqflow/state/lineState.js","Bqflow/shapes/Circle.js","Bqflow/state/ccp.js","Bqflow/components/Menu/Menu.jsx","Bqflow/shapes/Rectangle.js","Bqflow/shapes/Square.js","Bqflow/Shape.js","Bqflow/shapes/Line.js","Bqflow/Canvas.jsx","Bqflow/Json/Json.jsx","Bqflow/Bqflow.js","data.js","App.jsx","index.js"],"names":["SHAPE_TYPES","RECTANGLE","type","text","CIRCLE","SQUARE","DEFAULTS","STROKE","WIDTH","HEIGHT","ROTATION","TEXT","CORNERRADIUS","FILLLINEARGRADIENTSTARTPOINT","x","y","FILLLINEARGRADIENTENDPOINT","FILLLINEARGRADIENTCOLORSTOPS","RADIUS","LIMITS","MAX","MIN","handleDragStart","event","target","dataset","shape","offsetX","nativeEvent","offsetY","clientWidth","clientHeight","dragPayload","JSON","stringify","dataTransfer","setData","Palette","palette","updatedPalette","map","id","nanoid","toUpperCase","className","toLowerCase","Object","entries","index","key","data-shape","draggable","onDragStart","e","APP_NAMESPACE","baseState","selectedSwimlane","menu","show","copiedShape","copiedSwimlaneId","ccp","swimlanes","selected","shapes","lastId","lines","canvas","height","width","commonLine","useShapes","createStore","initialState","parse","localStorage","getItem","setState","fn","set","produce","addSwimLane","place","mainState","get","step","editing","value","desc","state","sortedSwimlane","sort","a","b","console","log","lastSwimlaneAdded","length","currentSwimlaneIndex","indexOf","newPlace","saveDiagram","removeItem","hasOwnProperty","call","setItem","reset","selectShape","swimlaneId","moveShape","transformRectangleShape","node","scaleX","scaleY","rotation","clamp","closeMenu","preventDefault","updateLinePoint","shapeId","swimlane","calucaltePoints","xPos","yPos","points","startId","endId","radius","boundBoxCallbackForCircle","oldBox","newBox","Circle","isSelected","shapeProps","shapeRef","useRef","transformerRef","textRef","useEffect","current","nodes","getLayer","batchDraw","handleSelect","useCallback","evt","cancelBubble","handleDrag","handleTransform","transformCircleShape","onClick","onTap","onContextMenu","ref","onDragEnd","onTransformEnd","wrap","align","anchorSize","borderDash","rotateEnabled","enabledAnchors","boundBoxFunc","Menu","clickedCan","propertyWrapper","list","copyShape","keys","cutCopyState","past","removeSwimlane","includes","uniqueId","fill","Math","random","toString","startX","startY","setInitialPoint","cut","copy","selectedSwimLaneId","selectedShapeId","deleteSelected","style","left","top","boundBoxCallbackForRectangle","Rectangle","Square","Shape","isSelectedSelector","Line","stroke","strokeWidth","handleDragOver","Canvas","childRef","linesArr","mainRef","stageRef","React","handleDrop","draggedData","getData","setPointersPositions","coords","getPointerPosition","cornerRadius","fillLinearGradientStartPoint","fillLinearGradientEndPoint","fillLinearGradientColorStops","createRectangle","createCircle","createSquare","onDrop","onDragOver","data-attr","onSubmit","onChange","defaultValue","spellCheck","updateDescription","window","innerWidth","clearSelection","selectSwimLane","line","Json","handleJson","Bqflow","data","useState","isJsonActive","setisJsonActive","selectedCanvas","setSelectedCanvas","propertyRef","handleRef","bqflowRef","pageX","pageY","openMenu","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f405e7b.chunk.js","sourcesContent":["export const SHAPE_TYPES = {\r\n  RECTANGLE: {\r\n    type: \"rectangle\",\r\n    text: \"RECTANGLE\",\r\n  },\r\n  CIRCLE: {\r\n    type: \"circle\",\r\n    text: \"CIRCLE\",\r\n  },\r\n  SQUARE: {\r\n    type: \"Square\",\r\n    text: \"SQUARE\",\r\n  },\r\n};\r\n\r\nexport const DEFAULTS = {\r\n  RECTANGLE: {\r\n    STROKE: \"#ddd\",\r\n    // FILL: \"#ffffff\",\r\n    WIDTH: 150,\r\n    HEIGHT: 85,\r\n    ROTATION: 0,\r\n    TEXT: \"RECTANGLE\",\r\n    CORNERRADIUS: 10,\r\n    FILLLINEARGRADIENTSTARTPOINT: { x: 0, y: 0 },\r\n    FILLLINEARGRADIENTENDPOINT: { x: 0, y: 100 },\r\n    FILLLINEARGRADIENTCOLORSTOPS: [0, \"#fff\", 1, \"#68adb9\"],\r\n  },\r\n  CIRCLE: {\r\n    STROKE: \"#ddd\",\r\n    // FILL: \"#ffffff\",\r\n    RADIUS: 50,\r\n    TEXT: \"CIRCLE\",\r\n    CORNERRADIUS: 10,\r\n    FILLLINEARGRADIENTSTARTPOINT: { x: 25, y: 25 },\r\n    FILLLINEARGRADIENTENDPOINT: { x: 100, y: 100 },\r\n    FILLLINEARGRADIENTCOLORSTOPS: [0, \"#fff\", 1, \"#68adb9\"],\r\n  },\r\n  SQUARE: {\r\n    STROKE: \"#ddd\",\r\n    // FILL: \"#ffffff\",\r\n    WIDTH: 75,\r\n    HEIGHT: 75,\r\n    ROTATION: 0,\r\n    TEXT: \"SQUARE\",\r\n    CORNERRADIUS: 10,\r\n    FILLLINEARGRADIENTSTARTPOINT: { x: 0, y: 0 },\r\n    FILLLINEARGRADIENTENDPOINT: { x: 10, y: 10 },\r\n    FILLLINEARGRADIENTCOLORSTOPS: [0, \"#fff\", 1, \"#68adb9\"],\r\n  },\r\n};\r\n\r\nexport const LIMITS = {\r\n  RECTANGLE: {\r\n    MAX: 1000,\r\n    MIN: 10,\r\n  },\r\n  CIRCLE: {\r\n    MAX: 500,\r\n    MIN: 5,\r\n  },\r\n  SQUARE: {\r\n    MAX: 500,\r\n    MIN: 5,\r\n  },\r\n};\r\n\r\nexport const DRAG_DATA_KEY = \"__drag_data_payload__\";\r\n","import React from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { DRAG_DATA_KEY, SHAPE_TYPES } from \"./state/constants\";\r\n\r\nconst handleDragStart = (event, text) => {\r\n  const type = event.target.dataset.shape;\r\n  if (type) {\r\n    // x,y coordinates of the mouse pointer relative to the position of the padding edge of the target node\r\n    const offsetX = event.nativeEvent.offsetX;\r\n    const offsetY = event.nativeEvent.offsetY;\r\n    // dimensions of the node on the browser\r\n    const clientWidth = event.target.clientWidth;\r\n    const clientHeight = event.target.clientHeight;\r\n\r\n    const dragPayload = JSON.stringify({\r\n      type,\r\n      offsetX,\r\n      offsetY,\r\n      clientWidth,\r\n      clientHeight,\r\n      text,\r\n    });\r\n\r\n    event.nativeEvent.dataTransfer.setData(DRAG_DATA_KEY, dragPayload);\r\n  }\r\n};\r\n\r\nexport function Palette({ palette = [] }) {\r\n  const updatedPalette = palette.map((shape) => ({\r\n    ...shape,\r\n    id: nanoid(),\r\n    type: shape.type.toUpperCase(),\r\n    className: shape.type.toLowerCase(),\r\n  }));\r\n  return (\r\n    <aside className=\"palette\">\r\n      <h2>Shapes</h2>\r\n      {Object.entries(SHAPE_TYPES).map(([, { type, text }], index) => {\r\n        return (\r\n          <div\r\n            key={index}\r\n            className={`shape ${type.toLowerCase()}`}\r\n            data-shape={type}\r\n            draggable\r\n            onDragStart={(e) => handleDragStart(e, text)}\r\n          >\r\n            {text}\r\n          </div>\r\n        );\r\n      })}\r\n      {updatedPalette.map(({ id, className, type, text }) => {\r\n        return (\r\n          <div\r\n            key={id}\r\n            className={`shape ${className}`}\r\n            data-shape={SHAPE_TYPES[type].type}\r\n            draggable\r\n            onDragStart={(e) => handleDragStart(e, text)}\r\n          >\r\n            {text}\r\n          </div>\r\n        );\r\n      })}\r\n    </aside>\r\n  );\r\n}\r\n","import { createStore } from \"@halka/state\";\r\nimport produce from \"immer\";\r\nimport clamp from \"clamp\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nimport { SHAPE_TYPES, DEFAULTS, LIMITS } from \"./constants\";\r\n\r\nconst APP_NAMESPACE = \"__integrtr_diagrams__\";\r\n\r\nconst baseState = {\r\n  selectedSwimlane: null,\r\n  menu: {\r\n    show: false,\r\n    x: 0,\r\n    y: 0,\r\n  },\r\n  copiedShape: {\r\n    copiedSwimlaneId: null,\r\n    shape: {},\r\n    type: null,\r\n  },\r\n  ccp: false,\r\n  swimlanes: {\r\n    selected: null,\r\n    shapes: {},\r\n    lastId: null,\r\n    lines: {},\r\n    canvas: {\r\n      height: 350,\r\n      width: 0,\r\n    },\r\n  },\r\n  commonLine: {\r\n    lastId: null,\r\n    lines: {},\r\n  },\r\n};\r\n\r\nexport const useShapes = createStore(() => {\r\n  const initialState = JSON.parse(localStorage.getItem(APP_NAMESPACE));\r\n  return { ...baseState, swimlanes: initialState ?? {} };\r\n});\r\n\r\nexport const setState = (fn) => useShapes.set(produce(fn));\r\n\r\n// ######## ADD SWIMLANES ################\r\nexport const addSwimLane = (place = \"\") => {\r\n  const mainState = useShapes.get();\r\n\r\n  const id = nanoid();\r\n  const initialState = {\r\n    selected: null,\r\n    step: {\r\n      editing: false,\r\n      value: \"\",\r\n    },\r\n    desc:\r\n      \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate quae quod, quia quo earum obcaecati nobis recusandae sunt adipisci cumque, voluptas repellat accusamus aut non?\",\r\n    shapes: {},\r\n    lastId: null,\r\n    lines: {},\r\n    canvas: {\r\n      height: 350,\r\n      width: 0,\r\n    },\r\n  };\r\n\r\n  setState((state) => {\r\n    let swimlanes = Object.entries(mainState.swimlanes);\r\n    const sortedSwimlane = swimlanes.sort(([keyA, a], [keyB, b]) => {\r\n      return a.place - b.place;\r\n    });\r\n\r\n    console.log(`sortedSwimlane`, sortedSwimlane);\r\n\r\n    if (place == \"top\") {\r\n      state.lastSwimlaneAdded = id;\r\n      state.swimlanes[id] = {\r\n        ...initialState,\r\n        place: sortedSwimlane[0][1].place - 1,\r\n        step: {\r\n          editing: false,\r\n          value: `Swimlane ${swimlanes.length + 1}`,\r\n        },\r\n      };\r\n    } else if (place == \"bottom\") {\r\n      state.lastSwimlaneAdded = id;\r\n      state.swimlanes[id] = {\r\n        ...initialState,\r\n        place: sortedSwimlane[sortedSwimlane.length - 1][1].place + 1,\r\n        step: {\r\n          editing: false,\r\n          value: `Swimlane ${swimlanes.length + 1}`,\r\n        },\r\n      };\r\n    } else if (place == \"above\") {\r\n      const currentSwimlaneIndex = sortedSwimlane\r\n        .map(([key, el]) => key)\r\n        .indexOf(mainState.selectedSwimlane);\r\n\r\n      if (currentSwimlaneIndex == 0) {\r\n        return;\r\n      }\r\n\r\n      const currentSwimlanePlace =\r\n        sortedSwimlane[currentSwimlaneIndex][1].place;\r\n\r\n      const prevSwimlanePlace =\r\n        sortedSwimlane[currentSwimlaneIndex - 1][1].place;\r\n\r\n      const newPlace = (currentSwimlanePlace + prevSwimlanePlace) / 2;\r\n\r\n      state.lastSwimlaneAdded = id;\r\n      state.swimlanes[id] = {\r\n        ...initialState,\r\n        place: newPlace,\r\n        step: {\r\n          editing: false,\r\n          value: `Swimlane ${swimlanes.length + 1}`,\r\n        },\r\n      };\r\n    } else if (place == \"below\") {\r\n      const currentSwimlaneIndex = sortedSwimlane\r\n        .map(([key, el]) => key)\r\n        .indexOf(mainState.selectedSwimlane);\r\n\r\n      if (sortedSwimlane.length - 1 == currentSwimlaneIndex) {\r\n        return;\r\n      }\r\n      const currentSwimlanePlace =\r\n        sortedSwimlane[currentSwimlaneIndex][1].place;\r\n\r\n      const prevSwimlanePlace =\r\n        sortedSwimlane[currentSwimlaneIndex + 1][1].place;\r\n\r\n      const newPlace = (currentSwimlanePlace + prevSwimlanePlace) / 2;\r\n\r\n      state.lastSwimlaneAdded = id;\r\n      state.swimlanes[id] = {\r\n        ...initialState,\r\n        place: newPlace,\r\n        step: {\r\n          editing: false,\r\n          value: `Swimlane ${swimlanes.length + 1}`,\r\n        },\r\n      };\r\n    } else if (!swimlanes.length) {\r\n      state.lastSwimlaneAdded = id;\r\n      state.swimlanes[id] = {\r\n        ...initialState,\r\n        place: 100,\r\n        step: {\r\n          editing: false,\r\n          value: `Swimlane ${swimlanes.length + 1}`,\r\n        },\r\n      };\r\n    } else {\r\n      state.lastSwimlaneAdded = id;\r\n      state.swimlanes[id] = {\r\n        ...initialState,\r\n        place: sortedSwimlane[sortedSwimlane.length - 1][1].place + 1,\r\n        step: {\r\n          editing: false,\r\n          value: `Swimlane ${swimlanes.length + 1}`,\r\n        },\r\n      };\r\n    }\r\n\r\n    // if (!state.swimlanes) {\r\n    //   state.lastSwimlaneAdded = id;\r\n    //   state.swimlanes[id] = {\r\n    //     ...initialState,\r\n    //   };\r\n    // } else {\r\n    //   state.lastSwimlaneAdded = id;\r\n    //   state.swimlanes[id] = {\r\n    //     ...initialState,\r\n    //   };\r\n    // }\r\n  });\r\n};\r\n\r\n// ######## SAVE TO LOCAL ################\r\nexport const saveDiagram = () => {\r\n  localStorage.removeItem(APP_NAMESPACE);\r\n  setState((state) => {\r\n    state.selectedSwimlane = null;\r\n    for (const key in state.swimlanes) {\r\n      if (Object.hasOwnProperty.call(state.swimlanes, key)) {\r\n        state.swimlanes[key].selected = null;\r\n      }\r\n    }\r\n  });\r\n  const state = useShapes.get();\r\n  console.log(`statestatestatestate`, state);\r\n  localStorage.setItem(APP_NAMESPACE, JSON.stringify(state.swimlanes));\r\n};\r\n\r\n// ######## RESET STATE ################\r\nexport const reset = () => {\r\n  localStorage.removeItem(APP_NAMESPACE);\r\n  console.log(`baseState`, baseState);\r\n  setState((state) => {\r\n    state.selectedSwimlane = null;\r\n    state.swimlanes = {};\r\n  });\r\n};\r\n\r\n// ######## CREATE RECTANLE SHAPE ################\r\nexport const createRectangle = (id, { x, y }) => {\r\n  setState((state) => {\r\n    state.swimlanes[id].shapes[nanoid()] = {\r\n      type: SHAPE_TYPES.RECTANGLE,\r\n      width: DEFAULTS.RECTANGLE.WIDTH,\r\n      height: DEFAULTS.RECTANGLE.HEIGHT,\r\n      // fill: DEFAULTS.RECTANGLE.FILL,\r\n      stroke: DEFAULTS.RECTANGLE.STROKE,\r\n      rotation: DEFAULTS.RECTANGLE.ROTATION,\r\n      cornerRadius: DEFAULTS.RECTANGLE.CORNERRADIUS,\r\n      fillLinearGradientStartPoint:\r\n        DEFAULTS.RECTANGLE.FILLLINEARGRADIENTSTARTPOINT,\r\n      fillLinearGradientEndPoint: DEFAULTS.RECTANGLE.FILLLINEARGRADIENTENDPOINT,\r\n      fillLinearGradientColorStops:\r\n        DEFAULTS.RECTANGLE.FILLLINEARGRADIENTCOLORSTOPS,\r\n      x,\r\n      y,\r\n    };\r\n  });\r\n};\r\n\r\n// ######## CREATE CIRCLE SHAPE ################\r\nexport const createCircle = (id, { x, y }) => {\r\n  setState((state) => {\r\n    state.swimlanes[id].shapes[nanoid()] = {\r\n      type: SHAPE_TYPES.CIRCLE,\r\n      radius: DEFAULTS.CIRCLE.RADIUS,\r\n      stroke: DEFAULTS.CIRCLE.STROKE,\r\n      fillLinearGradientStartPoint:\r\n        DEFAULTS.RECTANGLE.FILLLINEARGRADIENTSTARTPOINT,\r\n      fillLinearGradientEndPoint: DEFAULTS.RECTANGLE.FILLLINEARGRADIENTENDPOINT,\r\n      fillLinearGradientColorStops:\r\n        DEFAULTS.RECTANGLE.FILLLINEARGRADIENTCOLORSTOPS,\r\n      x,\r\n      y,\r\n    };\r\n  });\r\n};\r\n\r\n// ######## CREATE SQUARE SHAPE ################\r\nexport const createSquare = (id, { x, y }) => {\r\n  setState((state) => {\r\n    state.swimlanes[id].shapes[nanoid()] = {\r\n      type: SHAPE_TYPES.SQUARE,\r\n      width: DEFAULTS.SQUARE.WIDTH,\r\n      height: DEFAULTS.SQUARE.HEIGHT,\r\n      stroke: DEFAULTS.SQUARE.STROKE,\r\n      rotation: DEFAULTS.SQUARE.ROTATION,\r\n      cornerRadius: DEFAULTS.RECTANGLE.CORNERRADIUS,\r\n      fillLinearGradientStartPoint:\r\n        DEFAULTS.RECTANGLE.FILLLINEARGRADIENTSTARTPOINT,\r\n      fillLinearGradientEndPoint: DEFAULTS.RECTANGLE.FILLLINEARGRADIENTENDPOINT,\r\n      fillLinearGradientColorStops:\r\n        DEFAULTS.RECTANGLE.FILLLINEARGRADIENTCOLORSTOPS,\r\n      x,\r\n      y,\r\n    };\r\n  });\r\n};\r\n\r\n// ######## SELECT SHAPE ################\r\nexport const selectShape = (swimlaneId, id) => {\r\n  setState((state) => {\r\n    state.selectedSwimlane = null;\r\n\r\n    for (const key in state.swimlanes) {\r\n      if (Object.hasOwnProperty.call(state.swimlanes, key)) {\r\n        state.swimlanes[key].selected = null;\r\n      }\r\n    }\r\n\r\n    state.swimlanes[swimlaneId].selected = id;\r\n    state.selectedSwimlane = swimlaneId;\r\n    state.ccp = false;\r\n  });\r\n};\r\n\r\n// ######## CLEAR SELECT SHAPE ################\r\nexport const clearSelection = (swimlaneId) => {\r\n  setState((state) => {\r\n    state.swimlanes[swimlaneId].selected = null;\r\n    state.selectedSwimlane = null;\r\n  });\r\n};\r\n\r\n// ######## DELTE SELECT SHAPE ################\r\nexport const deleteSelected = () => {\r\n  const mainState = useShapes.get();\r\n  const selectedSwimLaneId = mainState.selectedSwimlane;\r\n  // check for selected swimlane id\r\n  const selectedShapeId = mainState.swimlanes[selectedSwimLaneId].selected;\r\n  if (selectedSwimLaneId) {\r\n    // check for selected shape id\r\n    if (selectedShapeId) {\r\n      setState((state) => {\r\n        delete state.swimlanes[selectedSwimLaneId].shapes[selectedShapeId];\r\n      });\r\n    }\r\n  }\r\n  const lines = mainState.swimlanes[selectedSwimLaneId].lines;\r\n  setState((state) => {\r\n    for (const key in lines) {\r\n      if (\r\n        lines[key].startId === selectedShapeId ||\r\n        lines[key].endId === selectedShapeId\r\n      ) {\r\n        delete state.swimlanes[selectedSwimLaneId].lines[key];\r\n\r\n        if (Object.entries(state.swimlanes[selectedSwimLaneId].lines)) {\r\n          state.swimlanes[selectedSwimLaneId].lastId = null;\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n// ######## MOVE SHAPE ################\r\nexport const moveShape = (swimlaneId, id, event) => {\r\n  setState((state) => {\r\n    const shape = state.swimlanes[swimlaneId].shapes[id];\r\n\r\n    if (shape) {\r\n      shape.x = event.target.x();\r\n      shape.y = event.target.y();\r\n    }\r\n  });\r\n};\r\n\r\n// ######## REMOVE SWIMLANE ################\r\nexport const removeSwimlane = (swimlaneId) => {\r\n  console.log(`swimlaneId`, swimlaneId);\r\n  const mainState = useShapes.get();\r\n  setState((state) => {\r\n    console.log(`state.swimlanes[swimlaneId]`, mainState.swimlanes[swimlaneId]);\r\n    delete state.swimlanes[swimlaneId];\r\n  });\r\n};\r\n\r\n// ######## UPDATE ATTRIBUTES SWIMLANE ################\r\nexport const updateAttribute = (attr, value) => {\r\n  const state = useShapes.get();\r\n  const selectedSwimLaneId = state.selectedSwimlane;\r\n  // check for selected swimlane id\r\n  if (selectedSwimLaneId) {\r\n    // check for selected shape id\r\n    const selectedShapeId = state.swimlanes[selectedSwimLaneId].selected;\r\n    if (selectedShapeId) {\r\n      setState((state) => {\r\n        const shape =\r\n          state.swimlanes[selectedSwimLaneId].shapes[selectedShapeId];\r\n\r\n        if (shape) {\r\n          shape[attr] = value;\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport const transformRectangleShape = (node, swimlaneId, id, event) => {\r\n  // transformer is changing scale of the node\r\n  // and NOT its width or height\r\n  // but in the store we have only width and height\r\n  // to match the data better we will reset scale on transform end\r\n  const scaleX = node.scaleX();\r\n  const scaleY = node.scaleY();\r\n\r\n  // we will reset the scale back\r\n  node.scaleX(1);\r\n  node.scaleY(1);\r\n\r\n  setState((state) => {\r\n    const shape = state.swimlanes[swimlaneId].shapes[id];\r\n\r\n    if (shape) {\r\n      shape.x = node.x();\r\n      shape.y = node.y();\r\n\r\n      shape.rotation = node.rotation();\r\n\r\n      shape.width = clamp(\r\n        // increase the width in order of the scale\r\n        node.width() * scaleX,\r\n        // should not be less than the minimum width\r\n        LIMITS.RECTANGLE.MIN,\r\n        // should not be more than the maximum width\r\n        LIMITS.RECTANGLE.MAX\r\n      );\r\n      shape.height = clamp(\r\n        node.height() * scaleY,\r\n        LIMITS.RECTANGLE.MIN,\r\n        LIMITS.RECTANGLE.MAX\r\n      );\r\n    }\r\n  });\r\n};\r\n\r\nexport const transformCircleShape = (node, swimlaneId, id, event) => {\r\n  // transformer is changing scale of the node\r\n  // and NOT its width or height\r\n  // but in the store we have only width and height\r\n  // to match the data better we will reset scale on transform end\r\n  const scaleX = node.scaleX();\r\n\r\n  // we will reset the scale back\r\n  node.scaleX(1);\r\n  node.scaleY(1);\r\n\r\n  setState((state) => {\r\n    const shape = state.swimlanes[swimlaneId].shapes[id];\r\n\r\n    if (shape) {\r\n      shape.x = node.x();\r\n      shape.y = node.y();\r\n\r\n      shape.radius = clamp(\r\n        (node.width() * scaleX) / 2,\r\n        LIMITS.CIRCLE.MIN,\r\n        LIMITS.CIRCLE.MAX\r\n      );\r\n    }\r\n  });\r\n};\r\n\r\n//############## UPDATE TEXT #####################\r\nexport const updateText = (value, swimlaneId, shapeId) => {\r\n  setState((state) => {\r\n    state.swimlanes[swimlaneId].shapes[shapeId].type.text = value;\r\n  });\r\n};\r\n\r\n//############## UPDATE TEXT #####################\r\nexport const updateStateFromFile = (value) => {\r\n  console.log(`value`, value);\r\n  setState((state) => {\r\n    // state.swimlanes = value;\r\n  });\r\n};\r\n\r\n//############## UPDATE DESCRIPTION #####################\r\nexport const updateDescription = (value, swimlaneId) => {\r\n  setState((state) => {\r\n    state.swimlanes[swimlaneId].desc = value;\r\n  });\r\n};\r\n\r\n// ############ OPEN MENU #################\r\nexport const openMenu = (e, bqflowRef) => {\r\n  const {\r\n    //  clientX: x, clientY: y,\r\n    pageX: x,\r\n    pageY: y,\r\n  } = e;\r\n  // console.log(`pageX, pageY `, pageX, pageY);\r\n  e.preventDefault();\r\n  setState((state) => {\r\n    state.menu = {\r\n      propertyWrapper: e.target == bqflowRef.current,\r\n      show: true,\r\n      x,\r\n      y,\r\n    };\r\n  });\r\n};\r\n\r\n// ############ CLOSE MENU #################\r\nexport const closeMenu = (e) => {\r\n  e.preventDefault();\r\n  setState((state) => {\r\n    state.menu = {\r\n      show: false,\r\n      x: 0,\r\n      y: 0,\r\n    };\r\n  });\r\n};\r\n","import { nanoid } from \"nanoid\";\r\nimport { useShapes, setState, clearSelection } from \"./state\";\r\n\r\n// ############## SET INITIAL LINE POINTS ##############\r\n\r\nexport const setInitialPoint = (shape, shapeId, swimlaneId) => {\r\n  // console.log(`setInitialPoint`, shape, shapeId, swimlaneId);\r\n  const mainState = useShapes.get();\r\n  const uniqueId = nanoid();\r\n\r\n  setState((state) => {\r\n    const swimlane = mainState.swimlanes[swimlaneId];\r\n    const { xPos: x, yPos: y } = calucaltePoints(shape, swimlane);\r\n\r\n    if (swimlane.lastId == null) {\r\n      state.swimlanes[swimlaneId].lastId = uniqueId;\r\n      state.swimlanes[swimlaneId].lines[uniqueId] = {\r\n        startId: shapeId,\r\n        endId: null,\r\n        points: [x, y],\r\n        fill: \"#\" + (((1 << 24) * Math.random()) | 0).toString(16),\r\n      };\r\n    }\r\n\r\n    if (\r\n      swimlane.lastId &&\r\n      swimlane.lines[swimlane.lastId].endId === null &&\r\n      swimlane.lines[swimlane.lastId].startId == shapeId\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (swimlane.lastId && swimlane.lines[swimlane.lastId].endId == null) {\r\n      state.swimlanes[swimlaneId].lines[swimlane.lastId].endId = shapeId;\r\n      const shape = swimlane.shapes[shapeId];\r\n      const type = swimlane.shapes[shapeId].type.type.toLowerCase();\r\n      const [startX, startY] = swimlane.lines[swimlane.lastId].points;\r\n      // console.log(`prevPoints`, startX, startY, x, y);\r\n      // console.log(`startX > x && startY < y`, startX > x, startY < y);\r\n      if (startX > x && startY < y) {\r\n        // ##### SECOND BELOW AND After #####\r\n        if (type === \"rectangle\") {\r\n          state.swimlanes[swimlaneId].lines[swimlane.lastId].points = [\r\n            startX,\r\n            startY,\r\n            startX + 10,\r\n            startY,\r\n            startX + 10,\r\n            startY - 75,\r\n            x - 20,\r\n            startY - 75,\r\n            x - 20,\r\n            y,\r\n            x,\r\n            y,\r\n          ];\r\n        } else if (type === \"square\") {\r\n          state.swimlanes[swimlaneId].lines[swimlane.lastId].points = [\r\n            startX,\r\n            startY,\r\n            startX + 10,\r\n            startY,\r\n            startX + 10,\r\n            startY - 75,\r\n            x - 20,\r\n            startY - 75,\r\n            x - 20,\r\n            y,\r\n            x,\r\n            y,\r\n          ];\r\n        } else if (type === \"cricle\") {\r\n          state.swimlanes[swimlaneId].lines[swimlane.lastId].points = [\r\n            startX,\r\n            startY,\r\n            startX + 10,\r\n            startY,\r\n            startX + 10,\r\n            startY - 75,\r\n            x - 20,\r\n            startY - 75,\r\n            x - 20,\r\n            y,\r\n            x,\r\n            y,\r\n          ];\r\n        } else {\r\n          state.swimlanes[swimlaneId].lines[swimlane.lastId].points = [\r\n            startX,\r\n            startY,\r\n            startX + 10,\r\n            startY,\r\n            startX + 10,\r\n            y - startY + startY,\r\n            x,\r\n            y,\r\n          ];\r\n        }\r\n      } else if (startX > x && startY > y) {\r\n        // ##### SECOND BEFORE AND ABOVE #####\r\n        if (type === \"rectangle\") {\r\n          state.swimlanes[swimlaneId].lines[swimlane.lastId].points = [\r\n            startX,\r\n            startY,\r\n            startX + 10,\r\n            startY,\r\n            startX + 10,\r\n            startY + 75,\r\n            x - 20,\r\n            startY + 75,\r\n            x - 20,\r\n            y,\r\n            x,\r\n            y,\r\n          ];\r\n        } else if (type === \"square\") {\r\n          state.swimlanes[swimlaneId].lines[swimlane.lastId].points = [\r\n            startX,\r\n            startY,\r\n            startX + 10,\r\n            startY,\r\n            startX + 10,\r\n            startY + 75,\r\n            x - 20,\r\n            startY + 75,\r\n            x - 20,\r\n            y,\r\n            x,\r\n            y,\r\n          ];\r\n        } else if (type === \"cricle\") {\r\n          state.swimlanes[swimlaneId].lines[swimlane.lastId].points = [\r\n            startX,\r\n            startY,\r\n            startX + 10,\r\n            startY,\r\n            startX + 10,\r\n            y + startY - startY,\r\n            x,\r\n            y,\r\n          ];\r\n        } else {\r\n          state.swimlanes[swimlaneId].lines[swimlane.lastId].points = [\r\n            startX,\r\n            startY,\r\n            startX + 10,\r\n            startY,\r\n            startX + 10,\r\n            y + startY - startY,\r\n            x,\r\n            y,\r\n          ];\r\n        }\r\n      } else if (startY == y) {\r\n        // ##### ON THE SAME LINE  #####\r\n        state.swimlanes[swimlaneId].lines[swimlane.lastId].points = [\r\n          startX,\r\n          startY,\r\n          x,\r\n          y,\r\n        ];\r\n      } else if (startY < y) {\r\n        // ##### ABOVE #####\r\n        state.swimlanes[swimlaneId].lines[swimlane.lastId].points = [\r\n          startX,\r\n          startY,\r\n          startX + (x - startX) / 2,\r\n          startY,\r\n          startX + (x - startX) / 2,\r\n          y,\r\n          x,\r\n          y,\r\n        ];\r\n      } else if (startY > y) {\r\n        // ##### ABOVE #####\r\n        state.swimlanes[swimlaneId].lines[swimlane.lastId].points = [\r\n          startX,\r\n          startY,\r\n          startX + (x - startX) / 2,\r\n          startY,\r\n          startX + (x - startX) / 2,\r\n          y,\r\n          x,\r\n          y,\r\n        ];\r\n      }\r\n      // else if (startY > y) {\r\n      //   // ##### ABOVE #####\r\n      //   state.swimlanes[swimlaneId].lines[swimlane.lastId].points = [\r\n      //     startX,\r\n      //     startY,\r\n      //     startX + (x - startX) / 2,\r\n      //     startY,\r\n      //     startX + (x - startX) / 2,\r\n      //     y,\r\n      //     x,\r\n      //     y,\r\n      //   ];\r\n      // }\r\n    } else {\r\n      state.swimlanes[swimlaneId].lastId = uniqueId;\r\n      state.swimlanes[swimlaneId].lines[uniqueId] = {\r\n        startId: shapeId,\r\n        endId: null,\r\n        points: [x, y],\r\n        fill: \"#\" + (((1 << 24) * Math.random()) | 0).toString(16),\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\n// ########### UPDATE POINTS ################\r\nexport const updateLinePoint = (e, shapeId, swimlaneId) => {\r\n  // debugger;\r\n  const mainState = useShapes.get();\r\n  setState((state) => {\r\n    const swimlane = mainState.swimlanes[swimlaneId];\r\n    const shape = mainState.swimlanes[swimlaneId].shapes[shapeId];\r\n    const type = shape.type.type.toLowerCase();\r\n    const { xPos: x, yPos: y } = calucaltePoints(shape, swimlane);\r\n    debugger;\r\n    for (const key in swimlane.lines) {\r\n      const points = state.swimlanes[swimlaneId].lines[key].points;\r\n      const lastPoints = mainState.swimlanes[swimlaneId].lines[key].points;\r\n\r\n      if (swimlane.lines[key].startId === shapeId) {\r\n        points[0] = x;\r\n        points[1] = y;\r\n\r\n        if (points.length == 8) {\r\n          points[3] = y;\r\n        }\r\n      } else if (swimlane.lines[key].endId === shapeId) {\r\n        points[points.length - 1] = y;\r\n        const type = shape.type.type.toLowerCase();\r\n\r\n        if (type === \"circle\") {\r\n          points[points.length - 2] = x - shape.radius * 2;\r\n          if (points.length == 8) {\r\n            points[2] = (points[6] + points[1]) / 2;\r\n            points[4] = (points[6] + points[1]) / 2;\r\n            points[5] = y;\r\n          }\r\n        } else if (type === \"rectangle\") {\r\n          points[points.length - 2] = x - shape.width;\r\n          if (points.length == 8) {\r\n            points[5] = y;\r\n          }\r\n        } else if (type === \"square\") {\r\n          points[points.length - 2] = x - shape.width;\r\n          if (points.length == 8) {\r\n            points[2] = (points[6] + points[1]) / 2;\r\n            points[4] = (points[6] + points[1]) / 2;\r\n            points[5] = y;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n// ########### DELETE UNWANTED STARTING POINT ################\r\n// export const deleteStartPoint = (swimlaneId) => {\r\n//   const mainState = useShapes.get();\r\n//   const swimlane = mainState.swimlanes[swimlaneId];\r\n//   setState((state) => {\r\n//     const lines = Object.entries(swimlane.lines);\r\n//     console.log(`lines`, lines[lines.length - 1][0]);\r\n\r\n//     if (swimlane.lines[swimlane.lastId].endId == null) {\r\n//       delete state.swimlanes[swimlaneId].lines[swimlane.lastId];\r\n//       state.swimlanes[swimlaneId].lastId = lines[lines.length - 1][0];\r\n//     }\r\n//   });\r\n// };\r\n\r\n// ########### CALCULATE START AND END POINTS ################\r\nconst calucaltePoints = (shape, swimlane) => {\r\n  const type = shape.type.type.toLowerCase();\r\n  // console.log(`shape,type`, shape, type);\r\n  let xPos = 0,\r\n    yPos = 0;\r\n  const lastId = swimlane.lastId;\r\n  const lines = swimlane.lines;\r\n\r\n  if (type === \"rectangle\") {\r\n    if (lastId && lines[lastId].endId === null) {\r\n      xPos = shape.x;\r\n      yPos = shape.y + shape.height / 2;\r\n    } else {\r\n      xPos = shape.x + shape.width;\r\n      yPos = shape.y + shape.height / 2;\r\n    }\r\n    return { xPos, yPos };\r\n  } else if (type === \"circle\") {\r\n    if (lastId && lines[lastId].endId === null) {\r\n      xPos = shape.x - shape.radius;\r\n      yPos = shape.y;\r\n    } else {\r\n      xPos = shape.x + shape.radius;\r\n      yPos = shape.y;\r\n    }\r\n\r\n    return { xPos, yPos };\r\n  } else if (type === \"square\") {\r\n    if (lastId && lines[lastId].endId === null) {\r\n      xPos = shape.x;\r\n      yPos = shape.y + shape.height / 2;\r\n    } else {\r\n      xPos = shape.x + shape.width;\r\n      yPos = shape.y + shape.height / 2;\r\n    }\r\n    return { xPos, yPos };\r\n  }\r\n\r\n  return { xPos, yPos };\r\n};\r\n\r\n// ########### CANVAS HEIGHT UPDATE FUNCTION ################\r\n// export const updateCanvasHeight = (x, y, swimlaneId) => {\r\n//   // console.log(`object`, x, y);\r\n//   const mainState = useShapes.get();\r\n//   setState((state) => {\r\n//     // console.log(`mainState.swimlanes`, mainState.swimlanes);\r\n//     state.swimlanes[swimlaneId].canvas.height = y;\r\n//   });\r\n// };\r\n","import React, { useRef, useEffect, useCallback } from \"react\";\r\nimport {\r\n  Circle as KonvaCircle,\r\n  Transformer,\r\n  Text as KonvaText,\r\n} from \"react-konva\";\r\nimport { updateLinePoint } from \"../state/lineState\";\r\nimport { LIMITS } from \"../state/constants\";\r\nimport {\r\n  selectShape,\r\n  transformCircleShape,\r\n  moveShape,\r\n  useShapes,\r\n} from \"../state/state\";\r\n\r\nconst boundBoxCallbackForCircle = (oldBox, newBox) => {\r\n  // limit resize\r\n  if (\r\n    newBox.width < LIMITS.CIRCLE.MIN ||\r\n    newBox.height < LIMITS.CIRCLE.MIN ||\r\n    newBox.width > LIMITS.CIRCLE.MAX ||\r\n    newBox.height > LIMITS.CIRCLE.MAX\r\n  ) {\r\n    return oldBox;\r\n  }\r\n  return newBox;\r\n};\r\n\r\nexport function Circle({ id, isSelected, type, swimlaneId, ...shapeProps }) {\r\n  const shapeRef = useRef();\r\n  const transformerRef = useRef();\r\n  const textRef = useRef();\r\n\r\n  const selectedSwimlane = useShapes((state) => state.swimlanes[swimlaneId]);\r\n  const shape = useShapes((state) => state.swimlanes[swimlaneId]?.shapes[id]);\r\n\r\n  useEffect(() => {\r\n    if (isSelected) {\r\n      transformerRef.current.nodes([shapeRef.current]);\r\n      transformerRef.current.getLayer().batchDraw();\r\n    }\r\n  }, [isSelected]);\r\n\r\n  const handleSelect = useCallback(\r\n    (event) => {\r\n      event.evt.preventDefault();\r\n      event.cancelBubble = true;\r\n      selectShape(swimlaneId, id);\r\n    },\r\n    [id]\r\n  );\r\n\r\n  const handleDrag = useCallback(\r\n    (event) => {\r\n      moveShape(swimlaneId, id, event);\r\n    },\r\n    [id]\r\n  );\r\n\r\n  const handleTransform = useCallback(\r\n    (event) => {\r\n      transformCircleShape(shapeRef.current, swimlaneId, id, event);\r\n    },\r\n    [id]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <KonvaCircle\r\n        onClick={handleSelect}\r\n        onTap={handleSelect}\r\n        onContextMenu={handleSelect}\r\n        onDragStart={handleSelect}\r\n        ref={shapeRef}\r\n        {...shapeProps}\r\n        draggable\r\n        onDragEnd={(e) => {\r\n          handleDrag(e);\r\n          updateLinePoint(e, id, swimlaneId);\r\n        }}\r\n        onTransformEnd={handleTransform}\r\n      />\r\n      {shape && (\r\n        <KonvaText\r\n          x={shape.x - shape.radius / 2}\r\n          y={shape.y}\r\n          text={type.text}\r\n          ref={textRef}\r\n          wrap=\"char\"\r\n          align=\"center\"\r\n        />\r\n      )}\r\n      {isSelected && (\r\n        <Transformer\r\n          anchorSize={5}\r\n          borderDash={[6, 2]}\r\n          ref={transformerRef}\r\n          rotateEnabled={false}\r\n          enabledAnchors={[\r\n            \"top-left\",\r\n            \"top-right\",\r\n            \"bottom-right\",\r\n            \"bottom-left\",\r\n          ]}\r\n          boundBoxFunc={boundBoxCallbackForCircle}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { nanoid } from \"nanoid\";\r\nimport { useShapes, setState, clearSelection, deleteSelected } from \"./state\";\r\n\r\n// ########### SELECT SWIMLANE ############\r\nexport const selectSwimLane = (e, swimlaneId) => {\r\n  setState((state) => {\r\n    state.selectedSwimlane = swimlaneId;\r\n    state.ccp = true;\r\n  });\r\n  e.evt.preventDefault();\r\n};\r\n\r\n// ########### COPY SHAPE ############\r\nexport const copy = (swimlaneId, shapeId, shape) => {\r\n  const mainState = useShapes.get();\r\n  const copyShape = mainState.copiedShape.shape;\r\n  setState((state) => {\r\n    if (!Object.keys(copyShape).length && Object.keys(copyShape).length <= 1) {\r\n      state.copiedShape.copiedSwimlaneId = swimlaneId;\r\n      state.copiedShape.shape[shapeId] = shape;\r\n    }\r\n    state.copiedShape.type = \"copy\";\r\n  });\r\n};\r\n\r\n// ########### CUT SHAPE ############\r\nexport const cut = (swimlaneId, shapeId, shape) => {\r\n  const mainState = useShapes.get();\r\n  const copyShape = mainState.copiedShape.shape;\r\n\r\n  setState((state) => {\r\n    if (!Object.keys(copyShape).length) {\r\n      state.copiedShape.copiedSwimlaneId = swimlaneId;\r\n      state.copiedShape.shape[shapeId] = shape;\r\n    }\r\n    state.copiedShape.type = \"cut\";\r\n  });\r\n};\r\n\r\n// ########### COPY SHAPE ############\r\nexport const past = () => {\r\n  debugger;\r\n  const mainState = useShapes.get();\r\n  const swimlaneId = mainState.selectedSwimlane;\r\n  const copyShape = mainState.copiedShape.shape;\r\n  const copiedSwimlaneId = mainState.copiedShape.copiedSwimlaneId;\r\n  const type = mainState.copiedShape.type;\r\n\r\n  const lines = mainState.swimlanes[copiedSwimlaneId].lines;\r\n\r\n  setState((state) => {\r\n    if (Object.keys(copyShape).length) {\r\n      const id = Object.keys(copyShape)[0];\r\n      const shape = copyShape[id];\r\n      const cutCopyState = state.copiedShape;\r\n      state.swimlanes[swimlaneId].shapes[id] = shape;\r\n      state.ccp = false;\r\n      cutCopyState.copiedSwimlaneId = {};\r\n      cutCopyState.shape = {};\r\n      cutCopyState.type = \"\";\r\n      if (type == \"cut\") {\r\n        for (const key in lines) {\r\n          if (lines[key].startId === id || lines[key].endId === id) {\r\n            delete state.swimlanes[copiedSwimlaneId].lines[key];\r\n            state.swimlanes[copiedSwimlaneId].lastId = null;\r\n          }\r\n        }\r\n        delete state.swimlanes[copiedSwimlaneId].shapes[id];\r\n      }\r\n    }\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  useShapes,\r\n  addSwimLane,\r\n  saveDiagram,\r\n  reset,\r\n  removeSwimlane,\r\n  deleteSelected,\r\n} from \"../../state/state\";\r\nimport { deleteStartPoint, setInitialPoint } from \"../../state/lineState\";\r\nimport { copy, cut, past } from \"../../state/ccp\";\r\n\r\nconst Menu = ({ clickedCan }) => {\r\n  const {\r\n    selectedSwimlane,\r\n    lastSwimlaneAdded,\r\n    swimlanes,\r\n    menu,\r\n    copiedShape,\r\n  } = useShapes((state) => state);\r\n\r\n  const { show, x, y, propertyWrapper } = menu;\r\n  let list = null;\r\n\r\n  if (!show) return null;\r\n\r\n  if (propertyWrapper) {\r\n    list = (\r\n      <>\r\n        <li onClick={() => addSwimLane()}>Add Swimlane</li>\r\n        <li onClick={saveDiagram}>Save</li>\r\n        <li onClick={reset}>Reset</li>\r\n      </>\r\n    );\r\n  } else if (Object.entries(swimlanes).length) {\r\n    list = (\r\n      <>\r\n        {Object.entries(swimlanes).length > 1 && (\r\n          <>\r\n            <li onClick={() => addSwimLane(\"above\")}>Add Swimlane Above</li>\r\n            <li onClick={() => addSwimLane(\"below\")}>Add Swimlane Below</li>\r\n          </>\r\n        )}\r\n        <li onClick={() => addSwimLane(\"top\")}>Add Swimlane At Top</li>\r\n        <li onClick={() => addSwimLane(\"bottom\")}>Add Swimlane At Bottom</li>\r\n        {Object.entries(copiedShape.shape).length >= 1 ? (\r\n          <li onClick={() => past()}>Paste</li>\r\n        ) : null}\r\n        <li onClick={() => removeSwimlane(selectedSwimlane)}>\r\n          Delete Swimlane\r\n        </li>\r\n        <li onClick={saveDiagram}>Save</li>\r\n        <li onClick={reset}>Reset</li>\r\n      </>\r\n    );\r\n  } else {\r\n    list = (\r\n      <>\r\n        <li onClick={() => addSwimLane()}>Add Swimlane</li>\r\n        <li onClick={saveDiagram}>Save</li>\r\n        <li onClick={reset}>Reset</li>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (\r\n    Object.keys(swimlanes).includes(selectedSwimlane) &&\r\n    selectedSwimlane &&\r\n    swimlanes[selectedSwimlane].selected\r\n  ) {\r\n    list = (\r\n      <>\r\n        <li\r\n          onClick={() =>\r\n            setInitialPoint(\r\n              swimlanes[selectedSwimlane].shapes[\r\n                swimlanes[selectedSwimlane].selected\r\n              ],\r\n              swimlanes[selectedSwimlane].selected,\r\n              selectedSwimlane\r\n            )\r\n          }\r\n        >\r\n          Connect\r\n        </li>\r\n        {/* <li onClick={() => deleteStartPoint(selectedSwimlane)}>\r\n          Delete Start Point\r\n        </li> */}\r\n\r\n        {Object.entries(copiedShape.shape) && (\r\n          <>\r\n            <li\r\n              onClick={() =>\r\n                cut(\r\n                  selectedSwimlane,\r\n                  swimlanes[selectedSwimlane].selected,\r\n                  swimlanes[selectedSwimlane].shapes[\r\n                    swimlanes[selectedSwimlane].selected\r\n                  ]\r\n                )\r\n              }\r\n            >\r\n              Cut\r\n            </li>\r\n            <li\r\n              onClick={() =>\r\n                copy(\r\n                  selectedSwimlane,\r\n                  swimlanes[selectedSwimlane].selected,\r\n                  swimlanes[selectedSwimlane].shapes[\r\n                    swimlanes[selectedSwimlane].selected\r\n                  ]\r\n                )\r\n              }\r\n            >\r\n              Copy\r\n            </li>\r\n          </>\r\n        )}\r\n        <li onClick={() => deleteSelected(selectedSwimlane)}>Delete</li>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ul className=\"menu\" style={{ left: x, top: y }}>\r\n      {list}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { useRef, useEffect, useCallback, useState } from \"react\";\r\nimport {\r\n  Rect as KonvaRectangle,\r\n  Transformer,\r\n  Text as KonvaText,\r\n} from \"react-konva\";\r\nimport Menu from \"../components/Menu/Menu\";\r\nimport { LIMITS } from \"../state/constants\";\r\nimport { updateLinePoint } from \"../state/lineState\";\r\nimport {\r\n  selectShape,\r\n  transformRectangleShape,\r\n  moveShape,\r\n  useShapes,\r\n} from \"../state/state\";\r\n\r\nconst boundBoxCallbackForRectangle = (oldBox, newBox) => {\r\n  // limit resize\r\n  if (\r\n    newBox.width < LIMITS.RECTANGLE.MIN ||\r\n    newBox.height < LIMITS.RECTANGLE.MIN ||\r\n    newBox.width > LIMITS.RECTANGLE.MAX ||\r\n    newBox.height > LIMITS.RECTANGLE.MAX\r\n  ) {\r\n    return oldBox;\r\n  }\r\n  return newBox;\r\n};\r\n\r\nexport function Rectangle({ id, isSelected, type, swimlaneId, ...shapeProps }) {\r\n  const shapeRef = useRef();\r\n  const transformerRef = useRef();\r\n  const textRef = useRef();\r\n  const { swimlanes } = useShapes((state) => state);\r\n\r\n  const shape = swimlanes && swimlanes[swimlaneId]?.shapes[id];\r\n\r\n  useEffect(() => {\r\n    if (isSelected) {\r\n      transformerRef.current.nodes([shapeRef.current]);\r\n      transformerRef.current.getLayer().batchDraw();\r\n    }\r\n  }, [isSelected]);\r\n\r\n  const handleSelect = useCallback(\r\n    (event) => {\r\n      // event.evt.preventDefault();\r\n      event.cancelBubble = true;\r\n      selectShape(swimlaneId, id);\r\n    },\r\n    [id, swimlaneId]\r\n  );\r\n\r\n  const handleDrag = useCallback(\r\n    (event) => {\r\n      moveShape(swimlaneId, id, event);\r\n    },\r\n    [id]\r\n  );\r\n\r\n  const handleTransform = useCallback(\r\n    (event) => {\r\n      transformRectangleShape(shapeRef.current, swimlaneId, id, event);\r\n    },\r\n    [id]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <KonvaRectangle\r\n        onClick={handleSelect}\r\n        onTap={handleSelect}\r\n        onContextMenu={handleSelect}\r\n        onDragStart={handleSelect}\r\n        ref={shapeRef}\r\n        {...shapeProps}\r\n        draggable\r\n        onDragEnd={(e) => {\r\n          handleDrag(e);\r\n          updateLinePoint(e, id, swimlaneId);\r\n        }}\r\n        onTransformEnd={handleTransform}\r\n      />\r\n      {shape && (\r\n        <KonvaText\r\n          x={shape.x + shape.width / 4}\r\n          y={shape.y + shape.height / 2.5}\r\n          text={type.text}\r\n          ref={textRef}\r\n          wrap=\"char\"\r\n          align=\"center\"\r\n        />\r\n      )}\r\n      {isSelected && (\r\n        <Transformer\r\n          anchorSize={5}\r\n          borderDash={[6, 2]}\r\n          ref={transformerRef}\r\n          boundBoxFunc={boundBoxCallbackForRectangle}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useRef, useEffect, useCallback } from \"react\";\r\nimport {\r\n  Rect as KonvaSquare,\r\n  Transformer,\r\n  Text as KonvaText,\r\n} from \"react-konva\";\r\n\r\nimport { LIMITS } from \"../state/constants\";\r\nimport { updateLinePoint } from \"../state/lineState\";\r\nimport {\r\n  selectShape,\r\n  transformRectangleShape,\r\n  moveShape,\r\n  useShapes,\r\n} from \"../state/state\";\r\n\r\nconst boundBoxCallbackForRectangle = (oldBox, newBox) => {\r\n  // limit resize\r\n  if (\r\n    newBox.width < LIMITS.SQUARE.MIN ||\r\n    newBox.height < LIMITS.SQUARE.MIN ||\r\n    newBox.width > LIMITS.SQUARE.MAX ||\r\n    newBox.height > LIMITS.SQUARE.MAX\r\n  ) {\r\n    return oldBox;\r\n  }\r\n  return newBox;\r\n};\r\n\r\nexport function Square({ id, isSelected, type, swimlaneId, ...shapeProps }) {\r\n  const shapeRef = useRef();\r\n  const transformerRef = useRef();\r\n  const textRef = useRef();\r\n\r\n  const selectedSwimlane = useShapes((state) => state.swimlanes[swimlaneId]);\r\n  const shape = useShapes((state) => state.swimlanes[swimlaneId]?.shapes[id]);\r\n\r\n  useEffect(() => {\r\n    if (isSelected) {\r\n      transformerRef.current.nodes([shapeRef.current]);\r\n      transformerRef.current.getLayer().batchDraw();\r\n    }\r\n  }, [isSelected]);\r\n\r\n  const handleSelect = useCallback(\r\n    (event) => {\r\n      event.evt.preventDefault();\r\n      event.cancelBubble = true;\r\n\r\n      selectShape(swimlaneId, id);\r\n    },\r\n    [id]\r\n  );\r\n\r\n  const handleDrag = useCallback(\r\n    (event) => {\r\n      moveShape(swimlaneId, id, event);\r\n    },\r\n    [id]\r\n  );\r\n\r\n  const handleTransform = useCallback(\r\n    (event) => {\r\n      transformRectangleShape(\r\n        shapeRef.current,\r\n        swimlaneId,\r\n        swimlaneId,\r\n        id,\r\n        event\r\n      );\r\n    },\r\n    [id]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <KonvaSquare\r\n        onClick={handleSelect}\r\n        onTap={handleSelect}\r\n        onContextMenu={handleSelect}\r\n        onDragStart={handleSelect}\r\n        ref={shapeRef}\r\n        {...shapeProps}\r\n        draggable\r\n        onDragEnd={(e) => {\r\n          handleDrag(e);\r\n          updateLinePoint(e, id, swimlaneId);\r\n        }}\r\n        onTransformEnd={handleTransform}\r\n      />\r\n      {shape && (\r\n        <KonvaText\r\n          x={shape.x + shape.width / 4}\r\n          y={shape.y + shape.height / 2}\r\n          text={type.text}\r\n          ref={textRef}\r\n          wrap=\"char\"\r\n          align=\"center\"\r\n        />\r\n      )}\r\n      {isSelected && (\r\n        <Transformer\r\n          anchorSize={5}\r\n          borderDash={[6, 2]}\r\n          ref={transformerRef}\r\n          boundBoxFunc={boundBoxCallbackForRectangle}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useCallback } from \"react\";\r\nimport { SHAPE_TYPES } from \"./state/constants\";\r\nimport { useShapes } from \"./state/state\";\r\nimport { Circle } from \"./shapes/Circle\";\r\nimport { Rectangle } from \"./shapes/Rectangle\";\r\nimport { Square } from \"./shapes/Square\";\r\n\r\nexport function Shape({ shape, swimlaneId }) {\r\n  const isSelectedSelector = useCallback(\r\n    (state) =>\r\n      state.swimlanes[swimlaneId] &&\r\n      state.swimlanes[swimlaneId].selected === shape.id,\r\n    [shape, swimlaneId]\r\n  );\r\n\r\n  const isSelected = useShapes(isSelectedSelector);\r\n\r\n  if (shape.type.type === SHAPE_TYPES.RECTANGLE.type) {\r\n    return (\r\n      <Rectangle {...shape} isSelected={isSelected} swimlaneId={swimlaneId} />\r\n    );\r\n  } else if (shape.type.type === SHAPE_TYPES.CIRCLE.type) {\r\n    return (\r\n      <Circle {...shape} isSelected={isSelected} swimlaneId={swimlaneId} />\r\n    );\r\n  } else if (shape.type.type === SHAPE_TYPES.SQUARE.type) {\r\n    return (\r\n      <Square {...shape} isSelected={isSelected} swimlaneId={swimlaneId} />\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport { Arrow as KonvaLine } from \"react-konva\";\r\n\r\nexport function Line({ points, fill }) {\r\n  return (\r\n    <KonvaLine\r\n      points={points}\r\n      fill={`${fill ? fill : \"#000\"}`}\r\n      stroke={`${fill ? fill : \"#000\"}`}\r\n      strokeWidth={2}\r\n    />\r\n  );\r\n}\r\n","import React, { useRef, createRef, useCallback } from \"react\";\r\nimport { Layer, Stage } from \"react-konva\";\r\nimport {\r\n  clearSelection,\r\n  createCircle,\r\n  createRectangle,\r\n  createSquare,\r\n  removeSwimlane,\r\n  setState,\r\n  updateDescription,\r\n} from \"./state/state\";\r\nimport { DRAG_DATA_KEY, SHAPE_TYPES } from \"./state/constants\";\r\nimport { Shape } from \"./Shape\";\r\nimport { Line } from \"./shapes/Line\";\r\nimport { selectSwimLane } from \"./state/ccp\";\r\n\r\nconst handleDragOver = (event) => event.preventDefault();\r\n\r\nconst Canvas = ({ id: swimlaneId, swimlane, index, childRef }) => {\r\n  const shapes = swimlane && Object.entries(swimlane.shapes);\r\n  const linesArr = swimlane && Object.entries(swimlane.lines);\r\n\r\n  const mainRef = useRef();\r\n  const stageRef = useRef();\r\n\r\n  React.useEffect(() => {\r\n    // console.log(`stageRef`, stageRef.current);\r\n    // childRef(mainRef.current);\r\n  }, []);\r\n\r\n  const handleDrop = useCallback(\r\n    (event) => {\r\n      const draggedData = event.nativeEvent.dataTransfer.getData(DRAG_DATA_KEY);\r\n      if (draggedData) {\r\n        const {\r\n          offsetX,\r\n          offsetY,\r\n          type,\r\n          clientHeight,\r\n          clientWidth,\r\n          text,\r\n        } = JSON.parse(draggedData);\r\n        stageRef.current.setPointersPositions(event);\r\n\r\n        const coords = stageRef.current.getPointerPosition();\r\n\r\n        if (type === SHAPE_TYPES.RECTANGLE.type) {\r\n          // rectangle x, y is at the top,left corner\r\n          createRectangle(swimlaneId, {\r\n            x: coords.x - offsetX,\r\n            y: coords.y - offsetY,\r\n            text,\r\n          });\r\n        } else if (type === SHAPE_TYPES.CIRCLE.type) {\r\n          // circle x, y is at the center of the circle\r\n          createCircle(swimlaneId, {\r\n            x: coords.x - (offsetX - clientWidth / 2),\r\n            y: coords.y - (offsetY - clientHeight / 2),\r\n            text,\r\n          });\r\n        } else if (type === SHAPE_TYPES.SQUARE.type) {\r\n          createSquare(swimlaneId, {\r\n            x: coords.x - offsetX,\r\n            y: coords.y - offsetY,\r\n            text,\r\n          });\r\n        }\r\n      }\r\n    },\r\n    [swimlaneId]\r\n  );\r\n\r\n  const handleStepEditShow = (e) => {\r\n    setState((state) => {\r\n      state.swimlanes[swimlaneId].step.editing = true;\r\n    });\r\n  };\r\n\r\n  const handleStepEdit = (e) => {\r\n    setState((state) => {\r\n      state.swimlanes[swimlaneId].step.value = e.target.value;\r\n    });\r\n  };\r\n\r\n  const handleEditSumit = (e) => {\r\n    e.preventDefault();\r\n    setState((state) => {\r\n      state.swimlanes[swimlaneId].step.editing = false;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main\r\n      className=\"canvas\"\r\n      onDrop={handleDrop}\r\n      onDragOver={handleDragOver}\r\n      data-attr={swimlaneId}\r\n      ref={mainRef}\r\n      onContextMenu={() => childRef(mainRef.current)}\r\n    >\r\n      <div className=\"top\">\r\n        <h2 className=\"desc title\">Description</h2>\r\n        <h2 className=\"process title\">Process</h2>\r\n      </div>\r\n      <div className=\"bottom\">\r\n        <div className=\"swim-no\">\r\n          <p onClick={handleStepEditShow}>\r\n            {swimlane.step.value}-{swimlane.place}\r\n          </p>\r\n          {swimlane.step.editing && (\r\n            <form className=\"edit-step\" onSubmit={handleEditSumit}>\r\n              <input\r\n                type=\"text\"\r\n                onChange={handleStepEdit}\r\n                defaultValue={swimlane.step.value}\r\n              />\r\n            </form>\r\n          )}\r\n        </div>\r\n        <div className=\"desc\">\r\n          <textarea\r\n            defaultValue={swimlane.desc}\r\n            spellCheck=\"false\"\r\n            onChange={(e) => updateDescription(e.target.value, swimlaneId)}\r\n          />\r\n        </div>\r\n        <Stage\r\n          ref={stageRef}\r\n          width={window.innerWidth - (250 + 180)}\r\n          height={swimlane.canvas.height || 350}\r\n          onClick={(e) => {\r\n            clearSelection(swimlaneId);\r\n            selectSwimLane(e, swimlaneId);\r\n          }}\r\n        >\r\n          <Layer>\r\n            {shapes.length > 0 &&\r\n              shapes.map(([key, shape]) => (\r\n                <Shape\r\n                  key={key}\r\n                  shape={{ ...shape, id: key }}\r\n                  swimlaneId={swimlaneId}\r\n                />\r\n              ))}\r\n            {/* <Line\r\n              {...{\r\n                points: [209, 144.5, 236, 144.5, 236, 270.5, 472, 270.5],\r\n              }}\r\n            /> */}\r\n            {linesArr.length > 0 &&\r\n              linesArr.map(([key, line]) => <Line key={key} {...line} />)}\r\n          </Layer>\r\n        </Stage>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","import React from \"react\";\r\nimport { reset, saveDiagram, useShapes } from \"../state/state\";\r\n\r\nconst Json = ({ handleJson }) => {\r\n  const state = useShapes((state) => state.swimlanes);\r\n  console.log(`json`, state.swimlanes);\r\n  return (\r\n    <div className=\"json\">\r\n      <div className=\"buttons\">\r\n        <button onClick={handleJson}>Json</button>\r\n        <button onClick={saveDiagram}>Save</button>\r\n        <button onClick={reset}>Reset</button>\r\n      </div>\r\n      <div className=\"json-print\">\r\n        <pre>{JSON.stringify(state, null, 2)}</pre>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Json;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Palette } from \"./Palette\";\r\nimport Canvas from \"./Canvas\";\r\nimport {\r\n  useShapes,\r\n  addSwimLane,\r\n  saveDiagram,\r\n  reset,\r\n  setState,\r\n  openMenu,\r\n  closeMenu,\r\n} from \"./state/state\";\r\nimport \"./style.css\";\r\nimport \"./responsive.css\";\r\nimport Json from \"./Json/Json\";\r\nimport Menu from \"./components/Menu/Menu\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Bqflow({ palette = [], data = {} }, ref) {\r\n  const { selectedSwimlane, swimlanes, ccp } = useShapes((state) => state);\r\n  const [isJsonActive, setisJsonActive] = useState(false);\r\n  const [selectedCanvas, setSelectedCanvas] = useState(null);\r\n  const propertyRef = useRef(null);\r\n  const state = useShapes((state) => state);\r\n  console.log(`state`, state);\r\n  // state.swimlanes[Object.keys(state.swimlanes)[0]].lastId,\r\n  // state.swimlanes[Object.keys(state.swimlanes)[0]].lines\r\n\r\n  useEffect(() => {\r\n    if (typeof data == \"object\" && Object.keys(data).length)\r\n      setState((state) => {\r\n        state.swimlanes = data;\r\n      });\r\n  }, []);\r\n\r\n  const handleScreen = () => {\r\n    setisJsonActive(!isJsonActive);\r\n  };\r\n\r\n  const sortedSwimlane = Object.entries(swimlanes).sort(\r\n    ([keyA, a], [keyB, b]) => {\r\n      return a.place - b.place;\r\n    }\r\n  );\r\n\r\n  const handleRef = (ref) => {\r\n    setSelectedCanvas(ref);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isJsonActive ? (\r\n        <Json handleJson={handleScreen} />\r\n      ) : (\r\n        <div\r\n          className=\"bqflow\"\r\n          onContextMenu={(e) => openMenu(e, propertyRef)}\r\n          onClick={closeMenu}\r\n        >\r\n          <Menu clickedCan={selectedCanvas} />\r\n          <Palette />\r\n          <div className=\"property-wrapper\" ref={propertyRef}>\r\n            <div className=\"swimlanes\">\r\n              {sortedSwimlane &&\r\n                sortedSwimlane.map(([key, swimlane], index) => {\r\n                  return (\r\n                    <Canvas\r\n                      key={key}\r\n                      id={key}\r\n                      swimlane={swimlane}\r\n                      index={index + 1}\r\n                      childRef={handleRef}\r\n                    />\r\n                  );\r\n                })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nBqflow.propTypes = {\r\n  palette: PropTypes.array.isRequired,\r\n  data: PropTypes.object,\r\n};\r\n\r\nexport default Bqflow;\r\n","export const data = [\r\n  {\r\n    type: \"CIRCLE\",\r\n    text: \"Abc\",\r\n  },\r\n  {\r\n    type: \"SQUARE\",\r\n    text: \"abc\",\r\n  },\r\n  {\r\n    type: \"RECTANGLE\",\r\n    text: \"123\",\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport Bqflow from \"./Bqflow/Bqflow\";\r\nimport { data } from \"./data\";\r\nimport jsonData from \"./jsonData\";\r\n\r\nconst App = () => {\r\n  return <Bqflow palette={data} />;\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}